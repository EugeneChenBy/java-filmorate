drop table film cascade;
create table if not exists film
(
    film_id       int generated by default as identity primary key, -- идентификатор целочисленный, автоинкрементный
    name          varchar(64) not null,
    description   varchar(500),
    creation_date date,
    duration      int,
    mpa	          int,
    last_update   timestamp
);

create unique index if not exists film_id_uindex
    on film(film_id);

drop table mpa cascade;
create table if not exists mpa
(
    mpa_id        int generated by default as identity primary key, -- идентификатор целочисленный, автоинкрементный
    name          varchar(64) not null,
    last_update   timestamp
);

create unique index if not exists mpa_id_uindex
    on mpa(mpa_id);

insert into mpa (name, last_update) values ('G', current_timestamp());
insert into mpa (name, last_update) values ('PG', current_timestamp());
insert into mpa (name, last_update) values ('PG-13', current_timestamp());
insert into mpa (name, last_update) values ('R', current_timestamp());
insert into mpa (name, last_update) values ('NC-17', current_timestamp());

drop table genre cascade;
create table if not exists genre
(
    genre_id      int generated by default as identity primary key, -- идентификатор целочисленный, автоинкрементный
    name          varchar(64) not null,
    last_update   timestamp
);

create unique index if not exists genre_id_uindex
    on genre(genre_id);

insert into genre (name, last_update) values ('Комедия', current_timestamp());
insert into genre (name, last_update) values ('Драма', current_timestamp());
insert into genre (name, last_update) values ('Мультфильм', current_timestamp());
insert into genre (name, last_update) values ('Триллер', current_timestamp());
insert into genre (name, last_update) values ('Документальный', current_timestamp());
insert into genre (name, last_update) values ('Боевик', current_timestamp());

create table if not exists film_genre
(
    film_id       int,
    genre_id      int,
    last_update   timestamp,
    CONSTRAINT fk_film_id FOREIGN KEY (film_id) REFERENCES film (film_id) ON DELETE CASCADE,
    CONSTRAINT fk_genre_id FOREIGN KEY (genre_id) REFERENCES genre (genre_id)
);

create unique index if not exists filmgenre_id_uindex
    on film_genre(film_id, genre_id);

drop table users cascade;
create table if not exists users
(
    user_id       int generated by default as identity primary key, -- идентификатор целочисленный, автоинкрементный
    email         varchar(64),
    login         varchar(20),
    name          varchar(100),
    birthday      date,
    last_update   timestamp
);

create unique index if not exists user_id_uindex
    on users(user_id);

drop table friend cascade ;
create table if not exists friend
(
    user1_id      int,
    user2_id      int,
    status        int,
    last_update   timestamp,
    CONSTRAINT fk_frined1_id FOREIGN KEY (user1_id) REFERENCES users (user_id) ON DELETE CASCADE,
    CONSTRAINT fk_frined2_id FOREIGN KEY (user2_id) REFERENCES users (user_id) ON DELETE CASCADE,
    PRIMARY KEY (user1_id, user2_id)
);

create unique index if not exists friends_uindex
    on friend(user1_id, user2_id);

drop table film_like cascade ;
create table if not exists film_like
(
    film_id      int,
    user_id      int,
    last_update   timestamp,
    CONSTRAINT fk_likefilm_id FOREIGN KEY (film_id) REFERENCES film (film_id) ON DELETE CASCADE,
    CONSTRAINT fk_likeuser_id FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE,
    PRIMARY KEY (film_id, user_id)
);

create unique index if not exists filmlike_uindex
    on FILM_LIKE(user_id, film_id);